package co.edu.uniquindio.proyectoclubamigos.modelo;

import java.util.ArrayList;

public class ClubAmigo {

	//Atributos
		private Administrador administrador;
		private ArrayList<Afiliacion> listaAfiliacion = new ArrayList<Afiliacion>();


		public Administrador getAdministrador() {
			return administrador;
		}
		public void setAdministrador(Administrador administrador) {
			this.administrador = administrador;
		}
		public ArrayList<Afiliacion> getListaAfiliacion() {
			return listaAfiliacion;
		}
		public void setListaAfiliacion(ArrayList<Afiliacion> listaAfiliacion) {
			this.listaAfiliacion = listaAfiliacion;
		}

		public ClubAmigo(Administrador administrador, ArrayList<Afiliacion> listaAfiliacion) {
			super();
			this.administrador = administrador;
			this.listaAfiliacion = listaAfiliacion;
		}


		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((administrador == null) ? 0 : administrador.hashCode());
			result = prime * result + ((listaAfiliacion == null) ? 0 : listaAfiliacion.hashCode());
			return result;
		}


		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			ClubAmigos other = (ClubAmigos) obj;
			if (administrador == null) {
				if (other.administrador != null)
					return false;
			} else if (!administrador.equals(other.administrador))
				return false;
			if (listaAfiliacion == null) {
				if (other.listaAfiliacion != null)
					return false;
			} else if (!listaAfiliacion.equals(other.listaAfiliacion))
				return false;
			return true;
		}


		//---------------------------CRUD AFILIACION------------------------------------------

		/**
		 * Este metodo crea una afiliacion si el amigo no tiene una afiliacion
		 * @param nuevaAfiliacion
		 */
		public void crearAfiliacion(Afiliacion nuevaAfiliacion){

			boolean verificarAmigo = verficarAmigo(nuevaAfiliacion.getAmigo());
			if(verificarAmigo == false){
				listaAfiliacion.add(nuevaAfiliacion);
			}
		}

		/**
		 * Este metodo verifica si una afiliacion ya existe, la busca dentro de la lista de afiliaciones por
		 * codigo
		 * @param nuevaAfiliacion
		 */
		public void verificarAfiliacion(Afiliacion nuevaAfiliacion){
			boolean afiliacionVerificada = false;
			boolean flag  =false;

			if (nuevaAfiliacion !=null) {
				for (Afiliacion afiliacion : listaAfiliacion) {
					if (afiliacion.getCodigoAfiliacion().equals(nuevaAfiliacion.getCodigoAfiliacion()) && flag ==false) {
						afiliacionVerificada = true;
						flag = true;
					}
				}
			}
		}

		/**
		 * Este metodo busca una afiliacion, lo hace por su codigo
		 * @param nuevaAfiliacion
		 */
		public void buscarAfiliacion (Afiliacion nuevaAfiliacion){
			Afiliacion afiliacionEncontrada =null;
			boolean flag = false;
			if (nuevaAfiliacion != null) {
				for (Afiliacion afiliacion : listaAfiliacion) {
					if (afiliacion.getCodigoAfiliacion().equals(nuevaAfiliacion.getCodigoAfiliacion()) && flag ==false) {
						afiliacionEncontrada = afiliacion;
						flag = true;
					}
				}
			}

		}

		/**
		 * Este metodo actualiza la inforamcion de una afiliacion
		 * @param nuevaAfiliacion
		 */
		public void actualizarAfiliacion(Afiliacion nuevaAfiliacion){
			Afiliacion afiliacionEncontrada = null;

			if(nuevaAfiliacion !=null){
				for (Afiliacion afiliacion : listaAfiliacion) {
					if (afiliacion.getCodigoAfiliacion().equals(nuevaAfiliacion.getCodigoAfiliacion())) {
						afiliacionEncontrada = afiliacion;


						afiliacionEncontrada.setAmigo(nuevaAfiliacion.getAmigo());
						afiliacionEncontrada.setCodigoAfiliacion(nuevaAfiliacion.getCodigoAfiliacion());
						afiliacionEncontrada.setFechaAfiliacion(nuevaAfiliacion.getFechaAfiliacion());
						afiliacionEncontrada.setHoraAfiliacion(nuevaAfiliacion.getHoraAfiliacion());
					}
				}
			}
		}

		/**
		 * Este metodo elimina una afiliacion
		 * @param nuevaAfiliacion
		 */
		public void eliminarAfiliacion(Afiliacion nuevaAfiliacion){

			if(nuevaAfiliacion != null){
				for (Afiliacion afiliacion : listaAfiliacion) {
					if (afiliacion.getCodigoAfiliacion().equals(nuevaAfiliacion.getCodigoAfiliacion())) {
						afiliacion = null;
					}
				}
			}

		}

		//-----------------------------fin---------------------------------------------------

		/**
		 * este metodo busca un amigo por su nombre dentro de la lista de afiliaciones
		 * @param nuevoAmigo
		 * @return
		 */
		public Amigo buscarAimgo(Amigo nuevoAmigo){
			Amigo amigo = null;
			if (nuevoAmigo != null) {
				for (Afiliacion afiliacion : listaAfiliacion) {
					if (afiliacion.getAmigo().getNombre().equals(nuevoAmigo.getNombre())) {
						amigo = afiliacion.getAmigo();
					}
				}
			}

			return amigo;
		}

		/**
		 * Este metodo afilia a un amigo si este no está afiliado
		 * @param nuevaAfiliacion
		 */
		public void afiliarAmigo( Afiliacion nuevaAfiliacion){
			if (nuevaAfiliacion != null) {
				if(verificarAfiliacionAmigo(nuevaAfiliacion) == false){
					listaAfiliacion.add(nuevaAfiliacion);
				}
			}
		}


		/**
		 * este metodo verifica si un amigo existe o no
		 * @param nuevoAmigo
		 * @return
		 */
		public boolean verficarAmigo(Amigo nuevoAmigo){
			Amigo amigo = buscarAimgo(nuevoAmigo);
			if(amigo != null){
				return false;
			}
			return true;
		}


		/**
		 * este metodo verifica si un amigo ya tiene una afiliacion
		 * @param nuevaAfiliacion
		 * @return
		 */
		public boolean verificarAfiliacionAmigo(Afiliacion nuevaAfiliacion){
			boolean verificado = false;
			boolean flag = false;
			for (Afiliacion afiliacion : listaAfiliacion) {
				if(afiliacion.getAmigo().equals(nuevaAfiliacion.getAmigo()) && flag == false){
					verificado = true;
					flag = true;
				}
			}
			return verificado;
		}

	}